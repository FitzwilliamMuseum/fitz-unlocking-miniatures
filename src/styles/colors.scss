// Project
$black: #020202;
$white: #fff;
$dark-grey: #0f1a21;
$blue: #0067a0;
$dark-blue: #1f2a3e;
$font-blue: #1f2a3e;
$green: #10a37c;
$orange: #ff9600;
$beige:#f7f5f4;
$menu-grey: #d9d9da;
$hover-colour:#f1efee;
$divider-grey: #d2d2d2;

$defaultColors: (
  text: $black,
  text-inverse: $white,
  title: $font-blue,
  background: $white,
  background-dark: $dark-grey,
  background-black: $black,
  border: $divider-grey,
  primary: $blue,
  secondary: $font-blue,
  accent: $orange,
  accent-high: $black,
  highlight: $green
);

///////////
// Usage //
///////////
// This color function makes it easy for you to call a color by it's functional
// name anywhere you need.
// E.g. to use the `text` color, you type: `color: clr(text);`
//
// How it works:
// This function works in conjunction with the dynamic css custom properties
// declarations below. The item called in the function is prefixed with
// `var(--c-` to call the custom property for that color.
// E.g. `color: clr(text);` will return `color: var(--c-text);`
// Note: (The `--c-` is added via the `@each` loops below)
@function clr($colorChoice) {
    @return var(--c-#{$colorChoice});
}