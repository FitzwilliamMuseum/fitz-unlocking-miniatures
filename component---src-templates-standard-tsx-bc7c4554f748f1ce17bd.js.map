{"version":3,"file":"component---src-templates-standard-tsx-bc7c4554f748f1ce17bd.js","mappings":"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","sources":["webpack://gatsby_fitzwilliam_miniatures/./src/components/featureBox.tsx","webpack://gatsby_fitzwilliam_miniatures/./src/components/supporter.tsx","webpack://gatsby_fitzwilliam_miniatures/./src/templates/standard.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from 'gatsby'\nimport '../styles/styles.scss'\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport { isExternalUrl } from \"../util\";\n\nexport interface FeatureBoxItem {\n    readonly title: string | null;\n    readonly content: string | null;\n    readonly image_alt: string | null;\n    readonly link: {\n        readonly url: string | null;\n        readonly title: string | null;\n    } | null;\n    readonly image_src: {\n        readonly childImageSharp: {\n            readonly gatsbyImageData: IGatsbyImageData;\n        } | null;\n    } | null;\n}\n\nexport interface FeatureBoxProps {\n    item: FeatureBoxItem;\n    direction?: string;\n}\n\n\nconst FeatureBox: React.FC<FeatureBoxProps> = ({ item, direction }) => {\n    const d = direction ? direction : 'left'\n    const linkUri = item?.link?.url || ''\n    const linkExternal = isExternalUrl(linkUri)\n    if (linkExternal) {\n        return (\n            <a className=\"section--fb-item\" href={linkUri}>\n                {featureBoxStructure(item, d, true)}\n            </a>\n        )\n    }\n    return <Link className=\"section--fb-item\" to={linkUri}>\n        {featureBoxStructure(item, d, true)}\n    </Link>\n}\n\nconst featureBoxStructure = (item: FeatureBoxItem, direction: string, hasLink: boolean) => {\n    const image = item?.image_src ? item.image_src?.childImageSharp?.gatsbyImageData : null\n    if (direction == 'left') {\n        return (\n            <>\n                <ConditionalWrapper\n                    condition={!hasLink}\n                    wrapper={(children: any) => <div className=\"section--fb-item\">{children}</div>}\n                >\n                    <React.Fragment>\n                        <div className=\"fb--image\">\n                            {image && <GatsbyImage image={image} alt={item.image_alt ? item.image_alt : 'Placeholder'} />}\n                        </div>\n                        <div className=\"fb--content\">\n                            <h2>{item.title}</h2>\n                            <div className=\"text\">{item.content}</div>\n                        </div>\n                    </React.Fragment>\n                </ConditionalWrapper>\n            </>\n        )\n    }\n    return (\n        <>\n            <ConditionalWrapper\n                condition={!hasLink}\n                wrapper={(children: any) => <div className=\"section--fb-item\">{children}</div>}\n            >\n                <React.Fragment>\n                    <div className=\"fb--content\">\n                        <h2>{item.title}</h2>\n                        <div className=\"text\">{item.content}</div>\n                    </div>\n                    <div className=\"fb--image\">\n                        {image && <GatsbyImage image={image} alt={item.image_alt ? item.image_alt : 'Placeholder'} />}\n                    </div>\n                </React.Fragment>\n            </ConditionalWrapper>\n        </>\n    )\n}\n\nconst ConditionalWrapper = (props: any) => {\n    const { condition, wrapper, children } = props;\n    return condition ? wrapper(children) : children;\n}\n\nexport default FeatureBox","import { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport * as React from \"react\"\nimport '../styles/styles.scss'\n\ninterface SupporterProps {\n    readonly link: {\n        readonly url: string | null;\n        readonly title: string;\n    };\n    readonly image_src: {\n        readonly childImageSharp: {\n            readonly gatsbyImageData: IGatsbyImageData;\n        } | null;\n        publicURL: string\n    } | null;\n}\n\nconst Supporter: React.FC<SupporterProps> = ({ link, image_src }) => {\n\n    if (image_src && image_src.childImageSharp) {\n        const img = (<GatsbyImage objectFit=\"contain\" alt={link.title} image={image_src.childImageSharp.gatsbyImageData} />);\n        if (link && link.url) {\n            return <div className=\"supporter\"><a className=\"supporter--wrapper\" href={link?.url} target=\"__blank\">{img}</a></div>\n        } else {\n            return <div className=\"supporter\">{img}</div>\n        }\n    }\n    if (image_src?.publicURL) {\n        const img = <img alt={link.title} src={image_src.publicURL} />;\n        if (link && link.url) {\n            return <div className=\"supporter\"><a className=\"supporter--wrapper\" href={link?.url} target=\"__blank\">{img}</a></div>\n        } else {\n            return <div className=\"supporter\">{img}</div>\n        }\n    }\n    if (link && !link.url) {\n        return <div className=\"supporter\">{link.title}</div>\n    }\n    if (link && link.url) {\n        return <div className=\"supporter\"><a href={link?.url} target=\"__blank\">{link.title}</a></div>\n    }\n    return (<></>)\n}\n\nexport default Supporter\n","import * as React from \"react\"\nimport { graphql, PageProps } from 'gatsby'\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\"\nimport { Link } from 'gatsby'\nimport Layout from '../components/layout'\nimport FeatureBox, { FeatureBoxItem } from \"../components/featureBox\"\nimport Supporter from \"../components/supporter\"\n\nconst StandardTemplate = ({ data }: PageProps<Queries.StandardTemplateQuery>) => {\n\n  return (\n    <Layout\n      displayLogo={data.markdownRemark?.frontmatter?.displayLogo !== false}\n      dark={data.markdownRemark?.frontmatter?.dark !== false}>\n      <article>\n        <div className={`page-content`}>\n          {data.markdownRemark?.frontmatter?.displayTitle !== false && (\n            <div className=\"page-title\"><h1>{data.markdownRemark?.frontmatter?.title}</h1></div>\n          )}\n          {data.markdownRemark?.frontmatter?.sections && data.markdownRemark?.frontmatter?.sections.map(section => {\n            if (section?.type == 'banner') {\n              const image = section.image_src?.childImageSharp?.gatsbyImageData\n              return (\n                <div className=\"section--main background--black row\">\n                  <div className=\"col-6 col--sm-12\">\n                    {image && <GatsbyImage image={image} alt={section.image_alt ? section.image_alt : 'Placeholder'} />}\n                  </div>\n                  <div className=\"col-6 col--sm-12\">\n                    {section.logo && (<StaticImage className=\"logo\" src=\"../assets/svg/logo.png\" alt=\"logo\" />)}\n                    {section.title && (<h2>{section.title}</h2>)}\n                    {section.content && (<div className=\"section--content\"><div dangerouslySetInnerHTML={{ __html: section.content }} /></div>)}\n                  </div>\n                </div>\n              )\n            } else if (section?.type == 'feature_box') {\n              if (section?.fb_type == 'double') {\n                let count = -1;\n                return (<div className=\"section--fb double\">\n                  {section?.items && section?.items.map(item => {\n                    count++\n                    const fbItem = item as FeatureBoxItem\n                    if (count % 2 == 0) {\n                      return (<FeatureBox item={fbItem} direction=\"left\" />)\n                    } else {\n                      return (<FeatureBox item={fbItem} direction=\"right\" />)\n                    }\n                  })\n                  }\n                </div>)\n              } else {\n                return (\n                  <div className=\"section--fb single\">\n                    {\n                      section?.items && section?.items.map(item => {\n                        const image = item?.image_src?.childImageSharp?.gatsbyImageData\n                        return (\n                          <Link className=\"section--fb-item\" to={item?.link?.url || ''}>\n                            <div className=\"section--fb-item--left\">\n                              <div className=\"fb--content\">\n                                <h2>{item?.title}</h2>\n                                <div className=\"text\" dangerouslySetInnerHTML={{ __html: item?.content || '' }}></div>\n                              </div>\n                            </div>\n                            <div className=\"section--fb-item--right\">\n                              <div className=\"fb--image\">\n                                {image && <GatsbyImage image={image} alt={item.image_alt ? item.image_alt : 'Placeholder'} />}\n                              </div>\n                            </div>\n                          </Link>)\n                      })\n                    }\n                  </div>)\n              }\n            } else if (section?.type == 'supporters') {\n              const supporters: Array<any> = [];\n              section?.items && section?.items.map((item: any) => {\n                supporters.push(<Supporter link={item?.link} image_src={item?.image_src} />)\n              })\n              return (\n                <div className=\"section--supporters row\">\n                  {section?.title && <h3>{section?.title}</h3>}\n                  <div className=\"items\">\n                    {supporters}\n                  </div>\n                </div>\n              )\n            }\n            else if (section?.type == 'paragraph') {\n              return (\n                <div className=\"section--paragraph\">\n                  {section?.title && <h3>{section?.title}</h3>}\n                  <p>{section.content}</p>\n                </div>\n              )\n            }\n          })\n          }\n        </div>\n      </article>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\nquery StandardTemplate($slug: String) {\n\tmarkdownRemark(frontmatter: { slug: { eq: $slug } }) {\n\t\tid\n\t\thtml\n\t\tfrontmatter {\n\t\t\tsections {\n\t\t\t\timage_src {\n\t\t\t\t\tchildImageSharp {\n\t\t\t\t\t\tgatsbyImageData(layout: FULL_WIDTH)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\timage_alt\n\t\t\t\ttitle\n\t\t\t\tcontent\n\t\t\t\tfb_type\n\t\t\t\tlogo\n\t\t\t\ttype\n\t\t\t\tlink {\n\t\t\t\t\ttitle\n\t\t\t\t\turl\n\t\t\t\t}\n\t\t\t\titems {\n\t\t\t\t\ttitle\n\t\t\t\t\tcontent\n\t\t\t\t\tlink {\n\t\t\t\t\t\turl\n\t\t\t\t\t\ttitle\n\t\t\t\t\t}\n\t\t\t\t\timage_alt\n\t\t\t\t\timage_src {\n\t\t\t\t\t\tchildImageSharp {\n\t\t\t\t\t\t\tgatsbyImageData(layout: FULL_WIDTH)\n\t\t\t\t\t\t}\n            publicURL\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n      displayLogo\n      displayTitle\n      title\n      dark\n\t\t}\n\t}\n}\n`\n\nexport default StandardTemplate\n"],"names":["featureBoxStructure","item","image","direction","condition","wrapper","className","alt","ConditionalWrapper","props","children","d","linkUri","isExternalUrl","href","to","link","image_src","img","objectFit","gatsbyImageData","target","src","publicURL","data","displayLogo","dark","section","dangerouslySetInnerHTML","__html","content","count","fbItem","supporters"],"sourceRoot":""}